{"meta":{"title":"Wuuu","subtitle":"","description":"","author":"Charlie Wu","url":"https://calculusfkyou.github.io","root":"/"},"pages":[{"title":"404 Not Found：該頁面無法顯示","date":"2025-03-05T09:38:41.833Z","updated":"2025-03-05T09:38:41.833Z","comments":false,"path":"/404.html","permalink":"https://calculusfkyou.github.io/404.html","excerpt":"","text":""},{"title":"About me","date":"2025-03-05T09:38:41.834Z","updated":"2025-03-05T09:38:41.834Z","comments":false,"path":"about/index.html","permalink":"https://calculusfkyou.github.io/about/index.html","excerpt":"","text":"個人資料Charlie Wu，一位還在變強的學生。 背景校系：大一：臺東大學資工系 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 大二~至今：高師大軟體系年級：大三 經歷 特殊經歷 聯絡方式若有疑問，歡迎聯繫 &#x63;&#x68;&#97;&#114;&#108;&#x69;&#x65;&#x39;&#x33;&#48;&#x33;&#x32;&#x30;&#64;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;"},{"title":"Books","date":"2025-03-05T09:38:41.834Z","updated":"2025-03-05T09:38:41.834Z","comments":false,"path":"books/index.html","permalink":"https://calculusfkyou.github.io/books/index.html","excerpt":"","text":""},{"title":"Categories","date":"2025-03-05T09:38:41.834Z","updated":"2025-03-05T09:38:41.834Z","comments":false,"path":"categories/index.html","permalink":"https://calculusfkyou.github.io/categories/index.html","excerpt":"","text":""},{"title":"Links","date":"2025-03-05T09:38:41.836Z","updated":"2025-03-05T09:38:41.836Z","comments":false,"path":"links/index.html","permalink":"https://calculusfkyou.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2025-03-05T09:38:41.836Z","updated":"2025-03-05T09:38:41.836Z","comments":false,"path":"repository/index.html","permalink":"https://calculusfkyou.github.io/repository/index.html","excerpt":"","text":""},{"title":"Tags","date":"2025-03-05T09:38:41.836Z","updated":"2025-03-05T09:38:41.836Z","comments":false,"path":"tags/index.html","permalink":"https://calculusfkyou.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"歡迎","slug":"hello-world","date":"2025-03-05T09:38:41.834Z","updated":"2025-03-05T09:38:41.834Z","comments":false,"path":"2025/03/05/hello-world/","permalink":"https://calculusfkyou.github.io/2025/03/05/hello-world/","excerpt":"請先閱覽這篇置頂文","text":"歡迎來到我的部落格！您好，歡迎來到我的小天地！很高興您能來到這裡。不論您是偶然點進來的，還是對科技感興趣的朋友，我都希望您能在這裡找到您喜歡的內容。 部落格內容在這個部落格中，我將分享作為一名軟體工程系學生的學習過程，探討各種主題，不僅限於科技和程式設計，也包括我在生活中的一些體會和見聞。這裡是我記錄學習成長、分享心得的地方，內容可能會涉及一些程式設計的技巧，也會有生活中的小故事。 關於我我目前是軟體工程系的大三學生，雖然還在學習中，但對科技充滿了熱情。我喜歡探索新知識，無論是在課堂內外，還是關於科技或是生活。我並不是一個專家，只是一個正在學習和成長的學生，因此這裡的內容更多的是我的學習筆記和心得分享。 為什麼創建這個部落格？這個部落格的初衷很簡單，就是希望能夠記錄我的學習旅程，並與大家分享其中的點滴。希望無論您是科技愛好者，還是只想看看別人經歷的人，都能在這裡找到些許共鳴。 歡迎交流我非常歡迎您在這裡留下您的想法或是提問，讓我們一同交流，共同進步！期待在這個小小的角落，能與更多志同道合的朋友們相遇。 感謝您的到訪，祝您在這裡度過愉快的時光！","categories":[],"tags":[]},{"title":"DockerNotes","slug":"DockerNotes","date":"2024-11-20T15:19:13.000Z","updated":"2025-03-05T09:38:41.834Z","comments":true,"path":"2024/11/20/DockerNotes/","permalink":"https://calculusfkyou.github.io/2024/11/20/DockerNotes/","excerpt":"自製 Docker 入門筆記","text":"Docker 入門筆記 1. Docker 使用流程與說明使用流程 撰寫或下載鏡像（Image）： 從官方倉庫（如 Docker Hub）下載現有鏡像，或者基於自己的需求撰寫 Dockerfile。 構建鏡像（Build Image）： 使用 docker build 指令，從 Dockerfile 中構建自定義鏡像。 運行容器（Run Container）： 基於鏡像啟動容器，並配置端口、卷等。 操作容器（Manage Container）： 通過指令啟動、停止、刪除容器，或進行調試。 跨裝置遷移與部署： 使用 Docker Compose 或導出鏡像，快速在其他設備上配置環境。這樣做的好處是運行環境是完全一致的，無論是在本地、測試還是生產環境。 主要指令與說明 docker pull [OPTIONS] [IMAGE:TAG] 從 Docker Hub 或其他註冊表下載指定的鏡像。 [OPTIONS]： --all-tags：下載指定鏡像的所有標籤。 範例：1docker pull python:3.9 docker build [OPTIONS] [CONTEXT] 根據 Dockerfile 構建鏡像。 [OPTIONS]： -t [NAME:TAG]：給鏡像命名並指定標籤。 --no-cache：不使用緩存，強制重新構建。 範例：1docker build -t my-python-app . docker run [OPTIONS] [IMAGE] [COMMAND] 基於指定的鏡像啟動容器。 [OPTIONS]： -d：後台運行容器。 -p [HOST_PORT]:[CONTAINER_PORT]：映射主機和容器端口。 --name [NAME]：指定容器名稱。 -v [HOST_PATH]:[CONTAINER_PATH]：掛載本地文件或目錄到容器。 --rm：容器運行結束後自動刪除。 範例：1docker run -d -p 5000:5000 --name my-python-container python:3.9 從 Docker Hub 下載現有鏡像範例 下載 Python 鏡像並運行交互模式12docker pull python:3.9docker run -it python:3.9 python 執行後你會進入 Python 交互環境，可以直接輸入程式碼測試。12print(&quot;Hello from Docker!&quot;)exit() 使用 Dockerfile 構建與運行 Python 專案的完整流程 1. 撰寫 Dockerfile在專案目錄下建立 Dockerfile，內容如下： 123456789101112131415161718# 使用基礎映像FROM python:3.9-slim# 設置工作目錄WORKDIR /app# 複製依賴文件並安裝依賴COPY requirements.txt requirements.txtRUN pip install --no-cache-dir -r requirements.txt# 複製程式碼COPY . .# 暴露應用運行的端口EXPOSE 5000# 啟動指令CMD [&quot;python&quot;, &quot;app.py&quot;] 2. 構建鏡像運行以下指令，將 Dockerfile 轉換為鏡像： 1docker build -t my-python-app . -t my-python-app：給鏡像取名為 my-python-app。 .：表示 Dockerfile 所在的目錄。 完成後，Docker 會生成一個新的鏡像，你可以使用以下指令查看： 1docker images 3. 運行容器基於剛剛構建的鏡像，啟動一個容器來執行代碼： 1docker run -d -p 5000:5000 --name my-container my-python-app -d：後台運行容器。 -p 5000:5000：將容器內的 5000 端口映射到主機的 5000 端口。 --name my-container：給容器取名為 my-container。 my-python-app：基於剛剛構建的鏡像運行。 此時，容器已經啟動並執行程式，打開瀏覽器訪問 http://localhost:5000，應該能看到你的應用在運行。 4. 調試和修改代碼進入容器：1docker exec -it my-container /bin/bash 在容器內執行 Python 腳本或進行調試：1python app.py 5. 停止或刪除容器停止容器：1docker stop my-container 刪除容器：1docker rm my-container 小結 Dockerfile 是用來構建鏡像的，包含了應用的運行環境和依賴。 鏡像（Image） 是一個靜態模板，用於創建容器。 容器（Container） 是鏡像運行後的動態實例，在裡面執行你的代碼。 2. Dockerfile 撰寫與範例Flask 範例程式碼Flask 應用程式 (app.py)123456789from flask import Flaskapp = Flask(__name__)@app.route(&quot;/&quot;)def home(): return &quot;Hello, Docker!&quot;if __name__ == &quot;__main__&quot;: app.run(host=&quot;0.0.0.0&quot;, port=5000) requirements.txt1flask Dockerfile 的結構與範例Dockerfile 範例123456789101112131415161718# 使用基礎鏡像FROM python:3.9-slim# 設定工作目錄WORKDIR /app# 安裝依賴COPY requirements.txt .RUN pip install --no-cache-dir -r requirements.txt# 複製應用代碼COPY . .# 暴露端口EXPOSE 5000# 容器啟動時執行的指令CMD [&quot;python&quot;, &quot;app.py&quot;] 構建與運行：12docker build -t flask-app .docker run -d -p 5000:5000 flask-app 3. 多裝置間的環境配置與多運行環境使用 Docker Compose 快速配置多運行環境docker-compose.yml 範例123456789101112131415161718192021222324252627282930313233version: &#x27;3.8&#x27;services: nodejs: image: node:16 container_name: nodejs-container volumes: - ./node-app:/app command: [&quot;node&quot;] ports: - &quot;3000:3000&quot; python: image: python:3.9 container_name: python-container volumes: - ./python-app:/app command: [&quot;python&quot;] ports: - &quot;5000:5000&quot; mysql: image: mysql:8 container_name: mysql-container environment: MYSQL_ROOT_PASSWORD: example MYSQL_DATABASE: mydb ports: - &quot;3306:3306&quot; volumes: - mysql-data:/var/lib/mysqlvolumes: mysql-data: 運行指令 在專案目錄下運行：1docker-compose up -d 檢查服務：1docker ps 4. Docker 運作流程圖以下是 Docker 在 Client-Server 模式下的運作示意： 5. 重點整理 Docker 核心流程： 撰寫 Dockerfile。 使用 docker build 構建鏡像。 使用 docker run 啟動容器。 使用 docker-compose.yml 定義多服務環境。 常用指令： docker build：構建鏡像。 docker run：運行容器。 docker-compose up：運行多服務環境。 高效管理技巧： 使用 Dockerfile 定義環境，確保可重現性。 使用 docker-compose.yml 快速配置多運行環境。 Q&amp;A： Q：docker run只讓容器執行一次並退出，但仍然存在，而start是讓容器持續運行嗎A： docker run 的行為docker run 是基於鏡像創建並啟動一個新的容器，執行 CMD 或 ENTRYPOINT 中定義的指令。如果是一次性任務（如腳本執行完畢），容器會執行完畢後自動退出，但仍然存在於 docker ps -a 中。若程式是持續運行（如 Web 伺服器），則會一直保持運行狀態，直到手動停止。 docker start 的行為docker start 只能用於已經創建過的、處於停止狀態的容器。它會重新啟動該容器，但不會重新執行 CMD 指令（如果上次執行完畢，容器會馬上退出）。如果是持續運行的程式，docker start 會讓它繼續運行。 Q：build鏡像假設名稱重複會怎麼辦？A：會 覆蓋掉原本相同名稱和標籤的鏡像，不會出錯。 Q：run 容器名稱重複會怎麼辦？A：會報錯，提示容器名稱已存在。","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://calculusfkyou.github.io/tags/Docker/"}],"author":"charlie"},{"title":"NCPC Contest","slug":"ncpc","date":"2024-10-21T09:16:27.000Z","updated":"2025-03-05T09:38:41.834Z","comments":true,"path":"2024/10/21/ncpc/","permalink":"https://calculusfkyou.github.io/2024/10/21/ncpc/","excerpt":"","text":"9月底實驗室開會，教授突然提到NCPC、ITSA極客挑戰賽，於是我就緊急參加了。 在此感謝我的兩位好隊友 Bernie &amp; rika官網https://ncpc.nsysu.edu.tw/index.php 競賽日期初賽：113年9月29日（星期日）決賽：113年10月6日（星期日） 因颱風延至 113年10月13日（星期日） 成績初賽：4&#x2F;6 #110計分板：https://www2.nsysu.edu.tw/NCPC_scoreboard/preliminary/決賽：3&#x2F;13 #75計分板：https://ncpc.nsysu.edu.tw/static/file/62/1062/img/ScoreboardNCPC2024_Final-DOMjudge.pdf 一些心得這次參加競程其實很突然，本來已經不太專注於競程了，但教授突然提起，我就心血來潮報名參賽 (絕對不是為了獎金哈哈)。為此，迅速集結了兩位實力強勁的隊友，雖然賽前沒有太多練習，但我們還是完成了25頁的筆記 (雖然大部分內容並沒派上用場)。 初賽那天，我們學校只有我們一隊參賽，所以必須騎車一小時到中山大學應考。不過，因為只有一隊，我們只需要寫出一題就能進決賽。初賽的難度似乎比往年簡單，我們解了四題，但最後一小時發現我們的實力還差一點，未能破台，特別是英文題目的閱讀還是挑戰不小。 決賽時，各校高手如雲，我們的目標是拿佳作。上午講解了規則和測試環境，下午就是連續五小時的考試，真是精神上的極限挑戰。前三題我們解得還算順利，原本預計可以解五題，但在其中一題上卡了很久，發現處理 error 和演算法的細節真的至關重要。比賽中，我一直在算時間複雜度，這讓我重新認識到，很多平常學過的知識在寫和優化程式時都有用武之地。 最後我們只解了三題，沒能達到佳作的目標。走出考場時難免有些遺憾，但這是我們的第一次競程比賽，作為大三生，或許只剩一次參賽機會。不過，我們初生之犢不畏虎，我相信未來我們會變得更強，繼續提升自己的實力。 合照喔","categories":[{"name":"Contest","slug":"Contest","permalink":"https://calculusfkyou.github.io/categories/Contest/"}],"tags":[{"name":"NCPC","slug":"NCPC","permalink":"https://calculusfkyou.github.io/tags/NCPC/"}],"author":"charlie"},{"title":"GDSC onboarding event","slug":"GDSC_onboarding_event","date":"2024-08-24T15:38:57.000Z","updated":"2025-03-05T09:38:41.834Z","comments":true,"path":"2024/08/24/GDSC_onboarding_event/","permalink":"https://calculusfkyou.github.io/2024/08/24/GDSC_onboarding_event/","excerpt":"","text":"簡要心得今天早上四點半便起床，其實根本沒真正入睡。六點搭上高鐵前往台北，再轉乘擁擠的北捷，終於在最後一刻趕到101會議大樓，感覺身心都疲憊不堪。 上午的議程主要圍繞著lead如何有效領導社群，並探討了一些心法與訣竅，內容相當充實。下午則是分享有關Gemini和Google Cloud的話題，雖然差點因為疲勞而打瞌睡，但幸好還是撐過去了。現場雲集了來自各校的lead，大家看起來都非常有實力。 活動的尾聲，我有機會與南區的lead們互相認識，未來若有機會或許可以一起合作舉辦活動。晚上又匆忙趕回高雄，一整天幾乎沒合眼，感覺疲累至極。 希望這一學年能夠將NKNU GDSC社群發展得更好，發揮我們的影響力， Lead 重點：發揮影響力！！core team 組織運作依照工作分部門。團隊分工：計劃書(excel) → 執行社群經營：貼文、限時可以做模板用注意事項：社課地點安排、是否收取社費、社課的時間安排、保留活動紀錄(相片、影片、簡報)、問卷調查(發文、社課、活動後調查) Community &#x3D; goal + connection + passion6 attributes of a great leader vision and strategy confidence execution delegation consensus decision making Tips 大量產出、想到就去做 不是第一名才有意義 只有一種狀況能拖延… 接觸各種不同的想法 挑戰假設 尋找你的T(role model) 參與、賦予意義 Ask yourself online and&#x2F;or offline how does place of gathering inspire members? How many members GDSC’s value legal or compliance issues Promotion community exposure channels growth speed incentivizing current member 解構活動舉辦流程構思 → 籌措 → 報名 &amp; 宣傳 → 前置 → 活動執行 → Review 大合照","categories":[{"name":"GDSC","slug":"GDSC","permalink":"https://calculusfkyou.github.io/categories/GDSC/"}],"tags":[],"author":"charlie"},{"title":"testPost","slug":"testPost","date":"2024-08-11T23:27:17.000Z","updated":"2025-03-05T09:38:41.834Z","comments":true,"path":"2024/08/11/testPost/","permalink":"https://calculusfkyou.github.io/2024/08/11/testPost/","excerpt":"Here's something encrypted, password is required to continue reading.","text":"10d79030e8222445804370796b90fca106f15dd47c03b7cc3ac7fb0590359f3722835e80c022a136d356dd4baf10efd362e682a63d1110c072062a168ed200cf377ac0bfa516de52298498808726038a302bbc3706b2ec6e09e352c70f2bb078b0d38009c34b3909908e3ab29dfd2ea2183a8e1b6d903efba438794a0392e57127ed7f501e0db6b9781acafc2011ea1c83cddf768bb61b9edf91cfbb29c7ac3cf740faba5343fc347d97afd7f1bda8c68e7e5cc2ec9f8088a9dca41597c941a5 Hey, password is required here.","categories":[{"name":"blog","slug":"blog","permalink":"https://calculusfkyou.github.io/categories/blog/"}],"tags":[{"name":"test","slug":"test","permalink":"https://calculusfkyou.github.io/tags/test/"},{"name":"lock","slug":"lock","permalink":"https://calculusfkyou.github.io/tags/lock/"}]}],"categories":[{"name":"Contest","slug":"Contest","permalink":"https://calculusfkyou.github.io/categories/Contest/"},{"name":"GDSC","slug":"GDSC","permalink":"https://calculusfkyou.github.io/categories/GDSC/"},{"name":"blog","slug":"blog","permalink":"https://calculusfkyou.github.io/categories/blog/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://calculusfkyou.github.io/tags/Docker/"},{"name":"NCPC","slug":"NCPC","permalink":"https://calculusfkyou.github.io/tags/NCPC/"},{"name":"test","slug":"test","permalink":"https://calculusfkyou.github.io/tags/test/"},{"name":"lock","slug":"lock","permalink":"https://calculusfkyou.github.io/tags/lock/"}]}